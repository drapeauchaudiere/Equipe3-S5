/* coeffsIIR.dat */
/*
  Créateur:    
  Date:        
  Revisions:   

  DESCRIPTION : 
     Information pour le fonctionnement du filtre IIR biquad
*/	
#ifndef COEFFSIIR_H_
#define COEFFSIIR_H_

#define IIR_NB_COEFFS 6		// Nombre total de coeffcients a & b (b0 b1 b2 a0 a1 a2)
#define IIR_NB_FILTRES 4		// Nombre de filtres
#define IIR_NB_SECTIONS_MAX 1	// nb de sections d'ordre 2 du plus gros filtre

/* Coefficients a et b des filtres IIR d'ordre 2
   ordre : b0 b1 b2 a0 a1 a2
   format : point flottant */
const short IIR_COEFFS[][IIR_NB_COEFFS] = {
// 1er filtre (ordre 4, ripple de 3dB, fc = 700Hz, fe = 44100 Hz)
    {	0.02, 0.04, 0.02, 1, -1.5622, 0.6421},
// 2e filtre (ordre 4, ripple de 3dB, fc = 5000Hz, fe = 44100 Hz)
    {  0.5204,1.0407,0.5205, 1,0.7956,0.2858},
// 3e filtre (ordre 4, ripple de 3dB, fc = 7000Hz, fe = 44100 Hz)
    {  0.7280, -1.4559, 0.7280, 1, -1.3805, 0.5313},
// 4e filtre (ordre 4, ripple de 3dB, fc = 1000Hz, fe = 44100 Hz)
	{   0.9941, 1.9882, 0.9941, 1, 1.9881,0.9882},
};

// Gain global de chacun des filtres (format : 2Q13)
const short IIR_GAINS[IIR_NB_FILTRES] = {0.0799 ,1, 0.4771, 0.000070515}; // À COMPLÉTER

// Variables intermédiaires
#pragma DATA_ALIGN(IIR_W, 4);   // Alignement (int possède 4 octets)
int IIR_W[IIR_NB_SECTIONS_MAX][3] = {0}; 

#endif /* COEFFSIIR_H */
