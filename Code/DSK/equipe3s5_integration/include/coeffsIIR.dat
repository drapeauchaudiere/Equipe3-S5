/* coeffsIIR.dat */
/*
  Créateur:    
  Date:        
  Revisions:   

  DESCRIPTION : 
     Information pour le fonctionnement du filtre IIR biquad
*/	
#ifndef COEFFSIIR_H_
#define COEFFSIIR_H_

#define IIR_NB_COEFFS 6		// Nombre total de coeffcients a & b (b0 b1 b2 a0 a1 a2)
#define IIR_NB_FILTRES 4		// Nombre de filtres
#define IIR_NB_SECTIONS_MAX 1	// nb de sections d'ordre 2 du plus gros filtre

/* Coefficients a et b des filtres IIR d'ordre 2
   ordre : b0 b1 b2 a0 a1 a2
   format : point flottant */
const short IIR_COEFFS[][IIR_NB_COEFFS] = {
// 1er filtre (ordre 4, ripple de 3dB, fc = 700Hz, fe = 24000 Hz)
    {	2048, 4096, 2048, 8192, -14271, 6322},
// 2e filtre (ordre 4, ripple de 3dB, fc = 5000Hz, fe = 24000 Hz)
    {   4545, -9091, 4545, 8192, -13377, 5657},
// 3e filtre (ordre 4, ripple de 3dB, fc = 7000Hz, fe = 24000 Hz)
    {  2377, -4753, 2377, 8192, 2520, 1543},
// 4e filtre (ordre 4, ripple de 3dB, fc = 1000Hz, fe = 24000 Hz)
	{  2377, 4753, 2377, 8192, -2520, 1543 },
};

// Gain global de chacun des filtres (format : 2Q13)
const short IIR_GAINS[IIR_NB_FILTRES] = {243, 12268, 6218, 6218}; // À COMPLÉTER

// Variables intermédiaires
#pragma DATA_ALIGN(IIR_W, 4);   // Alignement (int possède 4 octets)
int IIR_W[IIR_NB_SECTIONS_MAX][3] = {0}; 

#endif /* COEFFSIIR_H */
