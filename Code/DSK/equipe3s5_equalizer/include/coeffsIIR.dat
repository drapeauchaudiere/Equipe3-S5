/* coeffsIIR.dat */
/*
  Créateur:    
  Date:        
  Revisions:   

  DESCRIPTION : 
     Information pour le fonctionnement du filtre IIR biquad
*/	
#ifndef COEFFSIIR_H_
#define COEFFSIIR_H_

#define IIR_NB_COEFFS 6		// Nombre total de coeffcients a & b (b0 b1 b2 a0 a1 a2)
#define IIR_NB_FILTRES 4		// Nombre de filtres
#define IIR_NB_SECTIONS_MAX 4	// nb de sections d'ordre 2 du plus gros filtre

short IIR_COEFFS[][IIR_NB_COEFFS] = {
    // 1er filtre (ordre 4, ripple de 3dB, fc = 700Hz, fe = 44100 Hz)
        {   2048, 4096, 2048, 8192, -15230, 7114},
    // 2e filtre (ordre 4, ripple de 3dB, fc = 5000Hz, fe = 44100 Hz)
        {  2068, 4135, 2068, 8192,-8480,3013},
    // 3e filtre (ordre 4, ripple de 3dB, fc = 7000Hz, fe = 44100 Hz)
        {  7203, -14406, 7203, 8192, -5577, 2087},
    // 4e filtre (ordre 4, ripple de 3dB, fc = 1000Hz, fe = 44100 Hz)
        {   15469, -30938, 15469, 8192, -14738, 6697},
};
const short IIR_GAINS[IIR_NB_FILTRES] = {76 ,2699, 4508, 3922}; // À COMPLÉTER

#pragma DATA_ALIGN(IIR_W, 4);
int IIR_W[IIR_NB_SECTIONS_MAX][3] = {0};

// Variables intermédiaires
#pragma DATA_ALIGN(IIR_W, 4);   // Alignement (int possède 4 octets)
int IIR_W[IIR_NB_SECTIONS_MAX][3] = {0}; 

#endif /* COEFFSIIR_H */
